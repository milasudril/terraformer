//@	{"target":{"name":"convhull.test"}}

#include "./convhull.hpp"

#include "testfwk/testfwk.hpp"

TESTCASE(terraformer_filters_convhull_1d)
{
	std::array<float, 129> values{};

	for(size_t k = 0; k != std::size(values); ++k)
	{
		auto const t = std::lerp(-2.0f*std::numbers::pi_v<float>,
			2.0f*std::numbers::pi_v<float>,
			static_cast<float>(k)/static_cast<float>(std::size(values) - 1));
		auto const xi = t - 2.0f;
		values[k] = std::cos(8.0f*t)*std::exp(-xi*xi/4.0f);
	}

	std::array<float, 129> const expected_result
	{
		 3.5533429e-08f
		,0.011937415f
		,0.023874795f
		,0.035812177f
		,0.047749557f
		,0.059686936f
		,0.071624316f
		,0.083561696f
		,0.095499076f
		,0.10743646f
		,0.11937384f
		,0.13131121f
		,0.14324859f
		,0.15518597f
		,0.16712335f
		,0.17906073f
		,0.19099811f
		,0.20293549f
		,0.21487287f
		,0.22681025f
		,0.23874763f
		,0.25068501f
		,0.26262239f
		,0.27455977f
		,0.28649715f
		,0.29843453f
		,0.31037191f
		,0.32230929f
		,0.33424667f
		,0.34618405f
		,0.35812142f
		,0.3700588f
		,0.38199618f
		,0.39393356f
		,0.40587094f
		,0.41780832f
		,0.4297457f
		,0.44168308f
		,0.45362046f
		,0.46555784f
		,0.47749522f
		,0.4894326f
		,0.50137001f
		,0.51330739f
		,0.52524477f
		,0.53718215f
		,0.54911953f
		,0.56105691f
		,0.57299429f
		,0.58493167f
		,0.59686905f
		,0.60880643f
		,0.62074381f
		,0.63268119f
		,0.64461857f
		,0.65655595f
		,0.66849333f
		,0.68043071f
		,0.69236809f
		,0.70430547f
		,0.71624285f
		,0.72818023f
		,0.74011761f
		,0.75205499f
		,0.76399237f
		,0.77592975f
		,0.78786713f
		,0.79980451f
		,0.81174189f
		,0.82367927f
		,0.83561665f
		,0.84755403f
		,0.85949141f
		,0.87142879f
		,0.88336617f
		,0.89530355f
		,0.90724093f
		,0.91917831f
		,0.93111569f
		,0.94305307f
		,0.95499045f
		,0.95671403f
		,0.95843762f
		,0.96016121f
		,0.96188474f
		,0.96360832f
		,0.96533191f
		,0.9670555f
		,0.96877909f
		,0.94481432f
		,0.92084962f
		,0.89688486f
		,0.8729201f
		,0.84895539f
		,0.82499063f
		,0.80102587f
		,0.7770611f
		,0.7530964f
		,0.72913164f
		,0.70516694f
		,0.68120217f
		,0.65723741f
		,0.63327265f
		,0.60930789f
		,0.58534318f
		,0.56137848f
		,0.53741372f
		,0.51344895f
		,0.48948419f
		,0.46551949f
		,0.44155473f
		,0.41758996f
		,0.39362526f
		,0.3696605f
		,0.34569573f
		,0.32173097f
		,0.29776627f
		,0.27380151f
		,0.24983674f
		,0.22587204f
		,0.20190728f
		,0.17794251f
		,0.15397781f
		,0.13001305f
		,0.10604829f
		,0.082083583f
		,0.05811882f
		,0.034154058f
		,0.010189275f
	};

	terraformer::convhull(values);
	for(size_t k = 0; k != std::size(values); ++k)
	{
		EXPECT_LT(std::abs(values[k] - expected_result[k]), 1e-7f);
	}

}

TESTCASE(terraformer_filters_convhull2_1d)
{
	std::array<float, 129> values{};

	for(size_t k = 0; k != std::size(values); ++k)
	{
		auto const t = std::lerp(-2.0f*std::numbers::pi_v<float>,
			2.0f*std::numbers::pi_v<float>,
			static_cast<float>(k)/static_cast<float>(std::size(values) - 1));
		auto const xi = t - 2.0f;
		values[k] = std::cos(8.0f*t)*std::exp(-xi*xi/4.0f);
	}

	auto const res = terraformer::convhull2(values);

	std::array<float, 129> const expected_result
	{
		 3.5533429e-08f
		,0.011937415f
		,0.023874795f
		,0.035812177f
		,0.047749557f
		,0.059686936f
		,0.071624316f
		,0.083561696f
		,0.095499076f
		,0.10743646f
		,0.11937384f
		,0.13131121f
		,0.14324859f
		,0.15518597f
		,0.16712335f
		,0.17906073f
		,0.19099811f
		,0.20293549f
		,0.21487287f
		,0.22681025f
		,0.23874763f
		,0.25068501f
		,0.26262239f
		,0.27455977f
		,0.28649715f
		,0.29843453f
		,0.31037191f
		,0.32230929f
		,0.33424667f
		,0.34618405f
		,0.35812142f
		,0.3700588f
		,0.38199618f
		,0.39393356f
		,0.40587094f
		,0.41780832f
		,0.4297457f
		,0.44168308f
		,0.45362046f
		,0.46555784f
		,0.47749522f
		,0.4894326f
		,0.50137001f
		,0.51330739f
		,0.52524477f
		,0.53718215f
		,0.54911953f
		,0.56105691f
		,0.57299429f
		,0.58493167f
		,0.59686905f
		,0.60880643f
		,0.62074381f
		,0.63268119f
		,0.64461857f
		,0.65655595f
		,0.66849333f
		,0.68043071f
		,0.69236809f
		,0.70430547f
		,0.71624285f
		,0.72818023f
		,0.74011761f
		,0.75205499f
		,0.76399237f
		,0.77592975f
		,0.78786713f
		,0.79980451f
		,0.81174189f
		,0.82367927f
		,0.83561665f
		,0.84755403f
		,0.85949141f
		,0.87142879f
		,0.88336617f
		,0.89530355f
		,0.90724093f
		,0.91917831f
		,0.93111569f
		,0.94305307f
		,0.95499045f
		,0.95671403f
		,0.95843762f
		,0.96016121f
		,0.96188474f
		,0.96360832f
		,0.96533191f
		,0.9670555f
		,0.96877909f
		,0.94481432f
		,0.92084962f
		,0.89688486f
		,0.8729201f
		,0.84895539f
		,0.82499063f
		,0.80102587f
		,0.7770611f
		,0.7530964f
		,0.72913164f
		,0.70516694f
		,0.68120217f
		,0.65723741f
		,0.63327265f
		,0.60930789f
		,0.58534318f
		,0.56137848f
		,0.53741372f
		,0.51344895f
		,0.48948419f
		,0.46551949f
		,0.44155473f
		,0.41758996f
		,0.39362526f
		,0.3696605f
		,0.34569573f
		,0.32173097f
		,0.29776627f
		,0.27380151f
		,0.24983674f
		,0.22587204f
		,0.20190728f
		,0.17794251f
		,0.15397781f
		,0.13001305f
		,0.10604829f
		,0.082083583f
		,0.05811882f
		,0.034154058f
		,0.010189275f
	};

	for(size_t k = 0; k != std::size(res); ++k)
	{
		EXPECT_LT(std::abs(res[k] - expected_result[k]), 1e-7f);

	}
}